{# @var craft \craft\web\twig\variables\CraftVariable #}
{#
/**
 * Grid plugin for Craft CMS
 *
 * Grid Field Settings
 *
 * @author    Will Browar
 * @copyright Copyright (c) 2018 Will Browar
 * @link      http://wbrowar.com
 * @package   Grid
 * @since     1.0.0
 */
#}

{% import "_includes/forms" as forms %}
{% import "grid/macros/helpers.twig" as helpers %}

{#{% do view.registerAssetBundle("wbrowar\\grid\\assetbundles\\grid\\GridAsset") %}#}

{#{{ forms.textField({#}
    {#label: 'Target Field',#}
    {#instructions: 'The field that you are laying out with this Grid field.',#}
    {#id: 'targetFieldId',#}
    {#name: 'targetFieldId',#}
    {#maxlength: 20,#}
    {#required: true,#}
    {#value: field['targetFieldId']})#}
{#}}#}

{% set fields = craft.app.fields.allFields() %}

{% set fieldOptions = [] %}
{% for item in fields %}
    {% if item is instance of('craft\\fields\\Assets')
        or item is instance of('craft\\fields\\Categories')
        or item is instance of('craft\\fields\\Entries')
        or item is instance of('craft\\fields\\Matrix')
        or item is instance of('craft\\fields\\Users') %}
        {% set fieldOptions = fieldOptions|merge({ ('id' ~ item.id): item.name ~ ' | ' ~ item.handle }) %}
    {% endif %}
{% endfor %}

{{ forms.selectField({
    label: 'Target Field',
    instructions: 'The field that you are laying out with this Grid field.',
    warning: 'Changing this will reset all layout data for this field.',
    id: 'targetFieldId',
    name: 'targetFieldId',
    options: fieldOptions,
    value: field['targetFieldId']}) }}

<div class="field">
    <div class="heading">
        <label>{{ 'Layout'|t('grid') }}</label>
        <div class="instructions">
            <p>{{ 'Define the layout of your grid at each breakpoint.'|t('grid') }}</p>
        </div>
    </div>
    <div class="grid__settings__breakpoints">
        <div class="grid__settings__breakpoint" v-for="(breakpoint, index) in layout.breakpoints" v-cloak>
            <div class="grid__settings__header">
                <div class="grid__settings__min_width">
                    <div class="grid__settings__min_width__field" v-if="breakpoint.minWidth && breakpoint.minWidth > 0">
                        {{ helpers.vueTextField({
                            inputAttr: 'v-model.number.trim="breakpoint.minWidth"',
                            instructions: '(min-width)',
                            label: 'Breakpoint'|t('grid'),
                            placeholder: '1024',
                        }) }}
                    </div>
                    {#<div v-else>#}
                        {#No breakpoint.#}
                    {#</div>#}
                </div>
                <div class="grid__settings__icon">
                    <div class="field">
                        <div class="heading">
                            <label>Icon</label>
                            <div class="instructions">
                                <p>{{ 'Represent layout device class.'|t('grid') }}</p>
                            </div>
                        </div>
                        <div class="btngroup">
                            <div class="btn" :class="{ 'active': breakpoint.icon === 'phone-portrait' }" @click="breakpoint.icon = 'phone-portrait'"><span class="grid__settings__icon__spacer icon_phone-portrait"></span></div>
                            <div class="btn" :class="{ 'active': breakpoint.icon === 'tablet-portrait' }" @click="breakpoint.icon = 'tablet-portrait'"><span class="grid__settings__icon__spacer icon_tablet-portrait"></span></div>
                            <div class="btn" :class="{ 'active': breakpoint.icon === 'tablet-landscape' }" @click="breakpoint.icon = 'tablet-landscape'"><span class="grid__settings__icon__spacer icon_tablet-landscape"></span></div>
                            <div class="btn" :class="{ 'active': breakpoint.icon === 'laptop' }" @click="breakpoint.icon = 'laptop'"><span class="grid__settings__icon__spacer icon_laptop"></span></div>
                            <div class="btn" :class="{ 'active': breakpoint.icon === 'desktop' }" @click="breakpoint.icon = 'desktop'"><span class="grid__settings__icon__spacer icon_desktop"></span></div>
                        </div>
                    </div>
                </div>
                <div class="grid__settings__breakpoint_actions">
                    <div class="btn delete icon" @click="removeBreakpoint(index)" v-if="breakpoint.minWidth > 0">{{ 'Remove'|t('grid') }}</div>
                </div>
            </div>
            <div class="grid__settings__layout">
                <div class="grid__settings__columns">
                    <div :id="'grid__settings__breakpoint__columns--' + index" v-if="breakpoint.modeColumns === 'fixed'">
                        {{ helpers.vueTextField({
                            inputAttr: '@change="updateBreakpoint(index)" v-for="(item, inputIndex) in (breakpoint.columns.length + 1)" v-model.trim="breakpoint.columns[inputIndex]" v-if="breakpoint.columns"',
                            label: 'Grid Template Columns'|t('grid'),
                            placeholder: '1fr',
                        }) }}
                    </div>
                    <div v-else-if="breakpoint.modeColumns === 'auto'">
                        {{ helpers.vueTextField({
                            inputAttr: 'v-model.trim="breakpoint.autoColumns"',
                            label: 'Grid Auto Columns'|t('grid'),
                            placeholder: 'auto',
                        }) }}
                    </div>
                </div>
                <div class="grid__settings__rows">
                    <div :id="'grid__settings__breakpoint__rows--' + index" v-if="breakpoint.modeRows === 'fixed'">
                        {{ helpers.vueTextField({
                            inputAttr: '@change="updateBreakpoint(index)" v-for="(item, inputIndex) in (breakpoint.rows.length + 1)" v-model.trim="breakpoint.rows[inputIndex]" v-if="breakpoint.rows"',
                            label: 'Grid Template Rows'|t('grid'),
                            placeholder: '1fr',
                        }) }}
                    </div>
                    <div v-else-if="breakpoint.modeRows === 'auto'">
                        {{ helpers.vueTextField({
                            inputAttr: 'v-model.trim="breakpoint.autoRows"',
                            label: 'Grid Auto Rows'|t('grid'),
                            placeholder: 'auto',
                        }) }}
                    </div>
                </div>
                <div class="grid__settings__preview">
                    <div class="grid__preview__grid grid__preview__grid--settings" :style="stylePreviewGrid(breakpoint)">
                        <div class="grid__preview__item" v-for="item in breakpoint.preview.itemsTotal"></div>
                    </div>
                </div>
                <div class="grid__settings__hr"></div>
                <div class="grid__settings__column_mode">
                    <div class="field">
                        <div class="heading">
                            <label>{{ 'Column Mode'|t('grid') }}</label>
                            <div class="instructions">
                                <p>{{ 'Determines if columns can be added later.'|t('grid') }}</p>
                            </div>
                        </div>
                        <div class="btngroup">
                            <div class="btn" :class="{ 'active': breakpoint.modeColumns === 'fixed' }" @click="breakpoint.modeColumns = 'fixed'">{{ 'Fixed'|t('grid') }}</div>
                            <div class="btn" :class="{ 'active': breakpoint.modeColumns === 'auto' }" @click="breakpoint.modeColumns = 'auto'">{{ 'Auto'|t('grid') }}</div>
                        </div>
                    </div>
                </div>
                <div class="grid__settings__row_mode">
                    <div class="field">
                        <div class="heading">
                            <label>{{ 'Row Mode'|t('grid') }}</label>
                            <div class="instructions">
                                <p>{{ 'Determines if rows can be added later.'|t('grid') }}</p>
                            </div>
                        </div>
                        <div class="btngroup">
                            <div class="btn" :class="{ 'active': breakpoint.modeRows === 'fixed' }" @click="breakpoint.modeRows = 'fixed'">{{ 'Fixed'|t('grid') }}</div>
                            <div class="btn" :class="{ 'active': breakpoint.modeRows === 'auto' }" @click="breakpoint.modeRows = 'auto'">{{ 'Auto'|t('grid') }}</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="grid__settings__add_breakpoint">
            {{ helpers.vueTextField({
                inputAttr: 'v-model.number="nextBreakpointMinWidth"',
                instructions: 'Min-width value in pixels.'|t('grid'),
                label: 'Breakpoint'|t('grid'),
                placeholder: '1024',
            }) }}
            <div>
                <div class="btn add icon" @click="addBreakpoint(nextBreakpointMinWidth)">{{ 'Add layout'|t('grid') }}</div>
            </div>
        </div>
    </div>

    <input type="hidden" name="layout" v-model="layoutJson" v-if="layout.breakpoints">
</div>